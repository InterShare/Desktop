name: Deploy

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number"
        default: "0.0.0"
        required: true


jobs:
  macOS:
    name: Build macOS
    runs-on: macos-latest
    environment: Build
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Setup Certificates
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
        p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
        keychain: github-actions-xamarin
        keychain-password: ""

    - name: Setup Provisioning Profiles
      uses: apple-actions/download-provisioning-profiles@v1
      with:
        bundle-id: 'com.julian-baumann.InterShareDesktop'
        profile-type: 'MAC_APP_STORE'
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

    - name: Restore
      run: |
        dotnet restore src/DesktopApp/DesktopApp.csproj
        nuget restore src/DesktopApp.XamMac/DesktopApp.XamMac.csproj

    - name: Build
      env:
        PROJECT_NAME: "InterShare"
        MAC_APP_FILE: "InterShare.app"
        MAC_PROJECT_DIR: "./src/DesktopApp.XamMac"
        MAC_PROJECT_FILE: "DesktopApp.XamMac.csproj"
        BUILD_OUTPUT_DIRECTORY: ${{ github.workspace }}/build
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      run: |
        ./.github/workflows/scripts/build-mac.sh "${{ github.event.inputs.version }}"

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: macOS
        path: ${{ github.workspace }}/build

  linux-binary:
    name: Build Linux binary
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Restore
      run: |
        dotnet restore src/DesktopApp/DesktopApp.csproj
        dotnet restore src/DesktopApp.Gtk/DesktopApp.Gtk.csproj

    - name: Build
      env:
        BUILD_VERSION: ${{ steps.latest_tag.outputs.tag }}-${{ steps.extract_branch.outputs.branch }}
      run: |
        dotnet publish /p:PublishSingleFile=true \
                      /p:IncludeNativeLibrariesForSelfExtract=true \
                      --self-contained true \
                      -o ${{ github.workspace }}/build \
                      -c Release \
                      /property:Version="${{ github.event.inputs.version }}" \
                      -r linux-x64 \
                      src/DesktopApp.Gtk/DesktopApp.Gtk.csproj

    - name: Create tar.gz
      run: |
        cd ${{ github.workspace }}/build
        tar -czvf InterShare-${{ github.event.inputs.version }}.tar.gz InterShare

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: linux-binary
        path: ${{ github.workspace }}/build/InterShare-${{ github.event.inputs.version }}.tar.gz

  windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Restore
      run: |
        dotnet restore src/DesktopApp/DesktopApp.csproj
        dotnet restore src/DesktopApp.Wpf/DesktopApp.Wpf.csproj

    - name: Build
      run: |
        dotnet publish /p:PublishSingleFile=true `
                      /p:IncludeNativeLibrariesForSelfExtract=true `
                      /p:PublishTrimmed=true `
                      --self-contained true `
                      -o ${{ github.workspace }}/build `
                      -c Release `
                      /property:Version="${{ github.event.inputs.version }}" `
                      -r win-x64 `
                      src/DesktopApp.Wpf/DesktopApp.Wpf.csproj

    - name: Zip files
      run: |
        pushd "${{ github.workspace }}/build";
        Compress-Archive -Path InterShare.exe -DestinationPath "InterShare-${{ github.event.inputs.version }}.zip"
        popd;

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: windows
        path: "${{ github.workspace }}/build/InterShare-${{ github.event.inputs.version }}.zip"

  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [macOS, linux-binary, windows]
    steps:

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ${{ github.workspace }}/downloads

    - name: Create Release strings
      id: release_strings
      run: |
        echo "RELEASE_TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        echo "RELEASE_NAME=Version ${{ github.event.inputs.version }}" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: ${{ env.RELEASE_NAME }}
        files: ${{ github.workspace }}/downloads

  upload:
    runs-on: ubuntu-latest
    environment: Deployment
    name: Upload to server
    needs: [create-release]
    steps:

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ${{ github.workspace }}/downloads

    - name: FTP Upload
      uses: sebastianpopp/ftp-action@releases/v2
      with:
        host: ${{ secrets.FTP_SERVER }}
        user: ${{ secrets.FTP_USER }}
        password: ${{ secrets.FTP_PASSWORD }}
        localDir: ${{ github.workspace }}/downloads
        options: "--delete"

    - name: Create version file
      env:
        VERSION: ${{ github.event.inputs.version }}
      run: |
        mkdir -p ${{ github.workspace }}/versions;
        echo "{ \"macOS\": \"$VERSION\", \"linux\": \"$VERSION\", \"windows\": \"$VERSION\" }" >> ${{ github.workspace }}/versions/desktop-versions.json

    - name: FTP Upload version file
      uses: sebastianpopp/ftp-action@releases/v2
      with:
        host: ${{ secrets.FTP_SERVER }}
        user: ${{ secrets.FTP_USER }}
        password: ${{ secrets.FTP_PASSWORD }}
        localDir: ${{ github.workspace }}/versions